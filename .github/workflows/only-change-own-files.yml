name: Own Files Only

# this workflow checks whether a pull request changes only files in the project folder"
# PR Titles have to start with the Project ID! (e.g. B1: ....)
on:
  pull_request:
  push:
    branches:
    - b4_semp
    

  workflow_dispatch:

jobs:
  check-own-files:
    runs-on: ubuntu-latest
    steps:

    - uses: actions/checkout@v4
      with:
        submodules: false
    
    - name: "checkout pr base and head"
      run: |
        git log
        git status
        git fetch --no-tags --depth=1 origin main
        git checkout main
        echo "about to checkout pr base"
        git fetch origin ${{ github.event.pull_request.base.sha }}
        git checkout -b pr_base ${{ github.event.pull_request.base.sha }}
        echo "about to checkout head"
        git fetch origin  ${{ github.event.pull_request.head.sha }}
        git checkout -b pr_head ${{ github.event.pull_request.head.sha }}

    - name: extract project id
      id: extract_pid
      env: 
        PR_TITLE: ${{ github.event.pull_request.title }}
           
      run: |
           echo P_ID: "$P_ID" 
           echo "PR_TITLE: $PR_TITLE" 
           PID="${PR_TITLE:0:2}" 
           echo "PID $PID" 
           PID2=$(echo $PID | tr '[:upper:]' '[:lower:]') 
           echo "PID2 $PID2"
           echo "project_id=$PID2" >> $GITHUB_OUTPUT
           
  
    - name: "get changed files from git diff"
      continue-on-error: false
      id: diffs
      run: |
        DIFF=$(git diff --name-only pr_base pr_head) 
        echo DIFF: $DIFF
        echo "---  DIFF:  ---"
        echo $DIFF | tr ' ' '\n'
        echo "-----------------------"
        
        PID="${{ steps.extract_pid.outputs.project_id }}"
        echo "project id: $PID"
        RE="content/ss24.*$PID"
        OK=$(echo $DIFF | tr ' ' '\n' | grep "$RE" || echo "")  
        echo "-----  OK -----" && echo  $OK | tr ' ' '\n'
        NOK=$(echo $DIFF | tr ' ' '\n' | grep -v "$RE" || echo "") 
        echo "----- NOK: -----" && echo $NOK | tr ' ' '\n'
        echo "files_ok=\"$OK\"" >> $GITHUB_OUTPUT
        echo "files_not_ok=\"$NOK\" " >> $GITHUB_OUTPUT
        
    - name: "check ok and nok"
      continue-on-error: true
      run: |
        echo "##${{ steps.diffs.outputs.files_ok }}##"
        echo "##${{ steps.diffs.outputs.files_not_ok }}##"

        
    - name: "validation"
      continue-on-error: true
      run: |
          echo "##${{ steps.diffs.outputs.files_ok }}##"
          OK="${{ steps.diffs.outputs.files_ok }}"
          echo "files_ok: $OK"
          MATCHING=$(echo "$OK"  | tr ' ' '\n' | grep "[bm]\d-[a-z]\w*\(/.*\)*" || echo "")
          echo "MATCHING: $MATCHING "
          echo "-----"
          NONMATCHING=$(echo "$OK" | tr ' ' '\n' | grep -v "[bm]\d-[a-z]\w*\(/.*\)*" || echo "")
          echo "NONMATCHING: $NONMATCHING "
          echo "-----"
          if [ -z "$NONMATCHING" ]; then
             echo " all paths ok."
          else
             echo " includes invalid paths!"
             echo "NONMATCHING: $NONMATCHING " 
          fi
   
        
    - name: "report error"
      run: |
        OK="${{ steps.diffs.outputs.files_ok }}"
        NOK="${{ steps.diffs.outputs.files_not_ok }}"
        echo "ok: $OK" | tr ' ' '\n'
        echo "nok: $NOK | tr ' ' '\n'
        if [ -z "$NOK" ]; then 
          echo "all good"       
        else
           echo "ERROR: More files changed than allowed!"
                echo "------ Additional Files: "
                echo $NOK | tr ' ' '\n'
                echo "------ Allowed Files:"
                echo $OK | tr ' ' '\n'
                exit 123    
         fi

