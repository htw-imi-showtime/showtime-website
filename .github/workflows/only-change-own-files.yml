name: Own Files Only

# this workflow checks whether a pull request changes only files in the project folder"
# PR Titles have to start with the Project ID! (e.g. B1: ....)
on:
  pull_request:
  push:
    branches:
    - b4_semp
    

  workflow_dispatch:

jobs:
  check-own-files:
    runs-on: ubuntu-latest
    steps:
    - name: vars
      if: false
      run: |
        echo "some github variables:" \
        echo $GITHUB_REF  \
        echo "sha: ${{ github.event.head_commit.sha }}" \
        echo "message: ${{ github.event.head_commit.message }}" \
        echo "pr commit sha: ${{ github.event.pull_request.head.sha }}" \
        echo "pr commit ref: ${{ github.event.pull_request.head.ref }}" \
        echo "pr commit message: ${{ github.event.pull_request.head.message }}" \
        echo "pr commit: ${{ github.event.pull_request.head }}" \
        echo "base ref: ${{ github.event.pull_request.base.ref }}" \
        echo "base sha: ${{ github.event.pull_request.base.sha }}" \
        echo "event: ${{ github.event }}" \
        echo "event: ${{ github.event.message }}" \

    - uses: actions/checkout@v4
      with:
        submodules: false
    
    - name: "checkout relevant refs"
      run: |
        git log
        git status
        git fetch --no-tags --depth=1 origin main
        git checkout main
        echo "about to pr base"
        git fetch origin ${{ github.event.pull_request.base.sha }}
        git checkout -b pr_base ${{ github.event.pull_request.base.sha }}
        # echo "about to checkout merge commit"
        # git fetch origin ${{ github.event.pull_request.merge_commit_sha }}
        # git checkout -b pr_merge_commit ${{ github.event.pull_request.merge_commit_sha }}
        echo "about to checkout head"
        git fetch origin  ${{ github.event.pull_request.head.sha }}
        git checkout -b pr_head ${{ github.event.pull_request.head.sha }}

    - name: extract project id
      id: extract_pid
      env: 
        PR_TITLE: ${{ github.event.pull_request.title }}
           
      run: |
           echo P_ID: "$P_ID" 
           echo "PR_TITLE: $PR_TITLE" 
           PID="${PR_TITLE:0:2}" 
           echo "PID $PID" 
           PID2=$(echo $PID | tr '[:upper:]' '[:lower:]') 
           echo "PID2 $PID2"
           echo "project_id=$PID2" >> $GITHUB_OUTPUT
           
  
    - name: "git diff main"
      continue-on-error: true
      id: diffs
      run: |
         DIFF=$(git diff --name-only pr_base pr_head) 
         echo "project id: ${{ steps.extract_pid.outputs.project_id }}"
         OK=$(echo $DIFF | tr ' ' '\n' | grep "content/ss24.*${{ steps.extract_pid.outputs.project_id }}") 
         NOK=$(echo $DIFF | tr ' ' '\n' | grep -v "content/ss24.*${{ steps.extract_pid.outputs.project_id }}") 
         echo DIFF: $DIFF
         echo "---------- with \n: ---"
         echo $DIFF | tr ' ' '\n'
         echo "-----------------------"
         echo "-- OK\n: $OK"
         echo "NOK:\n $NOK"
         echo "files_ok=$(echo $OK  | tr '\n' ' ')" >> $GITHUB_OUTPUT
         echo "files_not_ok=\"$NOK\" " >> $GITHUB_OUTPUT
         
    - name: "validation"
      continue-on-error: true
      run: |
          grep --version
          OK="${{ steps.diffs.outputs.files_ok }}"
          echo "files_ok: $OK"
          MATCHING=$(echo "$OK"  | tr ' ' '\n' | grep "[bm]\d-[a-z]\w*\(/.*\)*" || echo "")
          echo "MATCHING: $MATCHING "
          echo "-----"
          NONMATCHING=$(echo "$OK" | tr ' ' '\n' | grep -v "[bm]\d-[a-z]\w*\(/.*\)*" || echo "")
          echo "NONMATCHING: $NONMATCHING "
          echo "-----"
          if [ -z "$NONMATCHING" ]; then
             echo " all paths ok."
          else
             echo " includes invalid paths!"
             echo "NONMATCHING: $NONMATCHING " 
          fi
   
        
    - name: "report error"
      run: |
        echo "ok: ${{ steps.diffs.outputs.files_ok }}" | tr ' ' '\n'
        echo "nok: ${{ steps.diffs.outputs.files_not_ok }}" | tr ' ' '\n'
        if [ -z ${{ steps.diffs.outputs.files_not_ok }} ]; then 
          echo "all good"       
        else
           echo "ERROR: More files changed than allowed!"
                echo "------ Additional Files: "
                echo ${{ steps.diffs.outputs.files_not_ok }} | tr ' ' '\n'
                echo "------ Allowed Files:"
                echo ${{ steps.diffs.outputs.files_ok }} | tr ' ' '\n'
                exit 123    
         fi

