name: Check Project Update PR

on:
  pull_request:
  workflow_dispatch:

jobs:
  hugo-build:
    if: github.repository == 'htw-imi-showtime/showtime-website'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: false
    - name: Get Theme
      run: |
        git submodule update --init themes/showtime-theme-2021

    - name: Hugo setup
      uses: peaceiris/actions-hugo@v3
      with:
        hugo-version: '0.128.0'
        extended: true

    - name: Build
      run: |
        hugo \
          --environment staging \
          --baseURL "https://htw-imi-showtime.github.io/tryout/" \
          --buildDrafts 

  check-title:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: false
        fetch-depth: 1
    - name: check pr title starts with project id
      id: extract_pid
      env: 
        PR_TITLE: ${{ github.event.pull_request.title }}
      run: |
        ./bin/check-project-update-pr/check-title.sh "$PR_TITLE"
        

  check_files_in_pr:
      needs: check-title
      runs-on: ubuntu-latest
      # Required permissions
      permissions:
        pull-requests: read
      steps:
      - uses: actions/checkout@v4
        with:
          submodules: false
          fetch-depth: 1
      
      - name: extract project id
        id: extract_pid
        env: 
          PR_TITLE: ${{ github.event.pull_request.title }}
        run: |
            project_id=$(bin/check-project-update-pr/extract_pid_from_pr_title.sh "$PR_TITLE")
            pid_ok=$?
            echo "project_id=$project_id" >> $GITHUB_OUTPUT
            echo "pid_ok=$pid_ok" >> $GITHUB_OUTPUT
            exit 0
      
      - name: 'get changed files'
        uses: dorny/paths-filter@v3
        id: filter
        with:
          list-files: 'shell'
          filters: |
            contains_project_files:
              - 'content/ss24/**'
              - 'content/ws23/**'
            in_project:
              - 'content/**/${{ steps.extract_pid.outputs.project_id }}-*/**'
            other_files:
              - '!content/**/${{ steps.extract_pid.outputs.project_id }}-*/**'
      
      - name: files in project folder
        if: (steps.filter.outputs.in_project == 'true')
        run: |
          echo "--------- project_files:"
          echo ${{ steps.filter.outputs.in_project_files }} | tr ' ' '\n'
          
      - name: 'no files outside of project folder'
        if: (steps.filter.outputs.other_files == 'false')  
        run: |
          echo "no files outside of project folder found - ok."

      - name: 'files outside of project folder'
        if: (steps.filter.outputs.other_files == 'true')
        run: |
          echo "--------- non_project_files (may not be part of project update PR!):"
          echo ${{ steps.filter.outputs.other_files_files }} | tr ' ' '\n'
          echo >&2 "ERROR: found files outside of project folder"
          exit 14
      
    
  check_disk_usage:
      needs: check-title
      runs-on: ubuntu-latest
      # Required permissions
      permissions:
        pull-requests: read
      steps:
      - uses: actions/checkout@v4
        with:
          submodules: false
          fetch-depth: 1

      - name: check disk usage
        env:
          PR_TITLE: ${{ github.event.pull_request.title }}
        run: |
          PID=$(bin/check-project-update-pr/extract_pid_from_pr_title.sh "$PR_TITLE")
          ./bin/check-project-update-pr/disk-usage.sh $PID
          
  check_for_cats:
    needs: check-title
    runs-on: ubuntu-latest
    # Required permissions
    permissions:
      pull-requests: read
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: false
        fetch-depth: 1
    - name: check disk usage
      env:
        PR_TITLE: ${{ github.event.pull_request.title }}
        PID: $(bin/check-project-update-pr/extract_pid_from_pr_title.sh "$PR_TITLE")
      run: ./bin/check-project-update-pr/check-for-cats.sh $PID
       
